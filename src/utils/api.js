// src/utils/api.js
import { GoogleGenerativeAI } from "@google/generative-ai";
import Groq from "groq-sdk";

const genAI = new GoogleGenerativeAI(import.meta.env.VITE_API_GEMINI_KEY);
const groq = new Groq({
  apiKey: import.meta.env.VITE_API_GROQ_KEY,
  dangerouslyAllowBrowser: true
});

// ‚Äï‚Äï‚Äï Style guidelines remain unchanged ‚Äï‚Äï‚Äï
const STYLE_GUIDELINES = `
You are a helpful AI assistant that formats all your answers beautifully in Markdown.

‚Ä¢ üéØ Use big section headers with relevant emojis (e.g., üéØ, üöÄ, üìö, üõ†Ô∏è).
‚Ä¢ ‚úÖ Use ‚úÖ or ‚û°Ô∏è for ordered steps or checklist items.
‚Ä¢ ‚ö° Highlight tips with ‚ö° or üí°.
‚Ä¢ ‚ö†Ô∏è Show warnings or important notes with ‚ö†Ô∏è or ‚ùó.
‚Ä¢ üìå Use üìå when mentioning important points or summaries.
‚Ä¢ üö´ For errors or restrictions, use üö´ or ‚ùå.
‚Ä¢ ‚úèÔ∏è For code-related instructions, use ‚úèÔ∏è or üß†.
‚Ä¢ üé® Feel free to use bold (**text**) and italics (*text*) for emphasis.
‚Ä¢ ‚ÑπÔ∏è Provide useful info with ‚ÑπÔ∏è when explaining concepts.
‚Ä¢ ‚è≥ If something is time-based, use ‚è≥ or ‚è±Ô∏è.
‚Ä¢ Use bullet points (‚Ä¢) or checkmarks for clean lists.

üëâ Keep all code blocks clean without adding emojis inside code.

Render everything cleanly and naturally in Markdown!
`;

export const generateGeminiResponse = async (prompt) => {
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const fullPrompt = `${STYLE_GUIDELINES}\n\n${prompt}`;
    const result = await model.generateContent(fullPrompt);
    return await result.response.text();
  } catch (error) {
    console.error("Gemini API error:", error);
    return "‚ö†Ô∏è Gemini response failed";
  }
};

// Simplified Groq implementation
export const generateLlamaResponse = async (prompt) => {
  try {
    const completion = await groq.chat.completions.create({
      model: "llama-3.3-70b-versatile",
      messages: [{
        role: "user",
        content: `${STYLE_GUIDELINES}\n\n${prompt}`
      }]
    });

    return completion.choices[0]?.message?.content || "‚ö†Ô∏è No response generated";
  } catch (error) {
    console.error("Groq API error:", error);
    return `‚ö†Ô∏è Llama-3 Error: ${error.message}`;
  }
};